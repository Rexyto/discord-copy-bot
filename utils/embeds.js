const { EmbedBuilder } = require('discord.js');

const COLORS = {
  SUCCESS: 0x57F287,
  ERROR: 0xED4245,
  INFO: 0x5865F2,
  WARNING: 0xFEE75C
};

const EMOJIS = {
  SUCCESS: '‚úÖ',
  ERROR: '‚ùå',
  WARNING: '‚ö†Ô∏è',
  INFO: '‚ÑπÔ∏è',
  LOADING: '‚è≥',
  SERVER: 'üè∞',
  ROLES: 'üë•',
  CHANNELS: 'üìù',
  CATEGORY: 'üìÅ',
  TIME: '‚è∞',
  TRASH: 'üóëÔ∏è',
  BACKUP: 'üíæ',
  CONFIG: '‚öôÔ∏è',
  LANGUAGE: 'üåê'
};

function createLanguageEmbed(currentLanguage) {
  return new EmbedBuilder()
    .setColor(COLORS.INFO)
    .setTitle(`${EMOJIS.LANGUAGE} Selecci√≥n de Idioma`)
    .setDescription(currentLanguage === 'es' ? 
      'Selecciona el idioma que deseas usar:' : 
      'Select the language you want to use:')
    .setTimestamp();
}

function createBackupEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(COLORS.INFO)
    .setTitle(`${EMOJIS.BACKUP} ${title}`)
    .setDescription(description)
    .setTimestamp();
}

function createErrorEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(COLORS.ERROR)
    .setTitle(`${EMOJIS.ERROR} ${title}`)
    .setDescription(description)
    .setTimestamp()
    .setFooter({ text: 'Se produjo un error' });
}

function createSuccessEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(COLORS.SUCCESS)
    .setTitle(`${EMOJIS.SUCCESS} ${title}`)
    .setDescription(description)
    .setTimestamp();
}

function createBackupConfigEmbed(channelName, backupCount, interval) {
  return new EmbedBuilder()
    .setColor(COLORS.SUCCESS)
    .setTitle(`${EMOJIS.CONFIG} Configuraci√≥n de Backups`)
    .setDescription('Sistema de backups autom√°ticos configurado exitosamente.')
    .addFields(
      {
        name: `${EMOJIS.CHANNELS} Canal de Notificaciones`,
        value: `#${channelName}`,
        inline: true
      },
      {
        name: `${EMOJIS.BACKUP} Cantidad de Backups`,
        value: `${backupCount} copias`,
        inline: true
      },
      {
        name: `${EMOJIS.TIME} Intervalo`,
        value: `Cada ${interval}`,
        inline: true
      }
    )
    .setTimestamp()
    .setFooter({ text: 'Sistema Activo' });
}

function createWebEmbed(url) {
  return new EmbedBuilder()
    .setColor(COLORS.INFO)
    .setTitle(`${EMOJIS.INFO} Panel de Control Web`)
    .setDescription(`Accede al panel de control en:\n${url}`)
    .addFields({
      name: 'Caracter√≠sticas',
      value: [
        '‚Ä¢ Visualizaci√≥n de backups',
        '‚Ä¢ Estad√≠sticas detalladas',
        '‚Ä¢ Gesti√≥n de configuraci√≥n',
        '‚Ä¢ Vista previa de restauraci√≥n'
      ].join('\n')
    })
    .setTimestamp()
    .setFooter({ text: 'Panel Web' });
}

function createLastBackupEmbed(lastBackup, backupContent) {
  const data = typeof backupContent === 'string' ? 
    JSON.parse(backupContent) : backupContent;

  const totalChannels = data.categories.reduce((acc, cat) => acc + cat.channels.length, 0);
  const date = new Date(lastBackup).toLocaleString();

  return new EmbedBuilder()
    .setColor(COLORS.INFO)
    .setTitle(`${EMOJIS.BACKUP} √öltimo Backup Realizado`)
    .setDescription(`Backup realizado el ${date}`)
    .addFields(
      {
        name: `${EMOJIS.SERVER} Informaci√≥n del Servidor`,
        value: `**Nombre:** ${data.name}`,
        inline: false
      },
      {
        name: `${EMOJIS.ROLES} Roles Guardados`,
        value: `${data.roles.length} roles`,
        inline: true
      },
      {
        name: `${EMOJIS.CATEGORY} Categor√≠as`,
        value: `${data.categories.length} categor√≠as`,
        inline: true
      },
      {
        name: `${EMOJIS.CHANNELS} Canales`,
        value: `${totalChannels} canales`,
        inline: true
      }
    )
    .setTimestamp()
    .setFooter({ text: 'Sistema de Backups Autom√°ticos' });
}

function createServerListEmbed(action) {
  return new EmbedBuilder()
    .setColor(COLORS.INFO)
    .setTitle(`${EMOJIS.SERVER} Servidores Guardados`)
    .setDescription(action === 'delete' ? 
      'Selecciona el servidor que deseas eliminar:' :
      'Selecciona el servidor que deseas restaurar:')
    .setTimestamp();
}

function createServerInfoEmbed(server, data) {
  const totalChannels = data.categories.reduce((acc, cat) => acc + cat.channels.length, 0);
  
  return new EmbedBuilder()
    .setColor(COLORS.INFO)
    .setTitle(`${EMOJIS.INFO} Informaci√≥n del Backup`)
    .setDescription(`Backup: **${server.name}**`)
    .addFields(
      {
        name: `${EMOJIS.SERVER} Servidor`,
        value: data.name,
        inline: true
      },
      {
        name: `${EMOJIS.ROLES} Roles`,
        value: `${data.roles.length} roles`,
        inline: true
      },
      {
        name: `${EMOJIS.CATEGORY} Categor√≠as`,
        value: `${data.categories.length} categor√≠as`,
        inline: true
      },
      {
        name: `${EMOJIS.CHANNELS} Canales`,
        value: `${totalChannels} canales`,
        inline: true
      },
      {
        name: 'üìÖ Creado',
        value: new Date(server.created_at).toLocaleString(),
        inline: true
      }
    )
    .setTimestamp();
}

function createServerListDetailedEmbed(servers) {
  const embed = new EmbedBuilder()
    .setColor(COLORS.INFO)
    .setTitle(`${EMOJIS.SERVER} Lista de Backups`)
    .setDescription('Aqu√≠ tienes una lista de todos los backups guardados:')
    .setTimestamp();

  servers.forEach(server => {
    const data = typeof server.server_data === 'string' ? 
      JSON.parse(server.server_data) : server.server_data;
    
    const totalChannels = data.categories.reduce((acc, cat) => acc + cat.channels.length, 0);
    
    embed.addFields({
      name: `${EMOJIS.BACKUP} ${server.name}`,
      value: [
        `${EMOJIS.ROLES} ${data.roles.length} roles`,
        `${EMOJIS.CATEGORY} ${data.categories.length} categor√≠as`,
        `${EMOJIS.CHANNELS} ${totalChannels} canales`,
        `üìÖ ${new Date(server.created_at).toLocaleString()}`
      ].join('\n'),
      inline: false
    });
  });

  return embed;
}

function createServerRestoreEmbed(serverName, data) {
  const totalChannels = data.categories.reduce((acc, cat) => acc + cat.channels.length, 0);
  
  return new EmbedBuilder()
    .setColor(COLORS.SUCCESS)
    .setTitle(`${EMOJIS.SUCCESS} Servidor Restaurado`)
    .setDescription(`La configuraci√≥n de **${serverName}** ha sido restaurada exitosamente.`)
    .addFields(
      {
        name: `${EMOJIS.ROLES} Roles Restaurados`,
        value: `${data.roles.length} roles`,
        inline: true
      },
      {
        name: `${EMOJIS.CATEGORY} Categor√≠as Restauradas`,
        value: `${data.categories.length} categor√≠as`,
        inline: true
      },
      {
        name: `${EMOJIS.CHANNELS} Canales Restaurados`,
        value: `${totalChannels} canales`,
        inline: true
      }
    )
    .setTimestamp()
    .setFooter({ text: 'Restauraci√≥n Completada' });
}

function createProgressEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(COLORS.INFO)
    .setTitle(`${EMOJIS.LOADING} ${title}`)
    .setDescription(description)
    .setTimestamp();
}

module.exports = {
  COLORS,
  EMOJIS,
  createLanguageEmbed,
  createBackupEmbed,
  createErrorEmbed,
  createSuccessEmbed,
  createBackupConfigEmbed,
  createWebEmbed,
  createLastBackupEmbed,
  createServerListEmbed,
  createServerInfoEmbed,
  createServerListDetailedEmbed,
  createServerRestoreEmbed,
  createProgressEmbed
};